---
layout: post
title: "开着车换轮子"
date: 2013-04-22 20:54
comments: true
categories: ["项目管理"]
---
跟汽车开久了轮子会老化一样，软件在持续开发的过程中，代码会逐渐腐朽。需求的变化、迫于工期而编写的代码、甚至代码重构本身都不可避免的导致代码腐朽。

例如在猿题库行测的开发过程中，手机客户端上做题界面中的工具条，我们调整过多个方案，每次方案调整都有一定的理由，但每次调整都不尽人意。客户端开发工程师很无语，代码改来改去，而且原有的代码不能删除，因为不能预知短期内代码会不会改回去（原有代码也可以删除，需要的话再从git仓库中找回即可）。这是非典型的因为需求变化而导致代码腐朽的问题（非典型是因为正常情况下，交互方案会由产品经理确定好，而这个例子中产品经理拿不定主意）。其他典型的需求变化则包括新功能的增加、原有功能的升级。

而迫于工期编写代码最容易出现**copy-paste-modify**现象。这种现象在页面相关的逻辑里面比较容易出现（例如iOS中的ViewController或者Java中Controller/Servlet）。例如2010年我刚接手某产品时，不少Controller里面的代码重复率高达80%，当时一个新来的员工抱怨说自己只能被迫着按照这种方式做，因为根本没办法对原有代码进行重构（如果重构，改动面积太大）。

## 停车、换轮子

解决这类问题，一种做法是停下来换轮子。大家在项目告一段落，例如一个大的版本发布之后，停下来不再开发新功能，而是重构原有的代码。直到代码重构到比较理想的状态之后再继续下一个版本的开发。

我们有这么干过。2010年我接手的那个产品，不仅仅有代码重复的问题，结构也非常不好，例如同样的逻辑分散在Apache配置、Spring配置以及Java代码中。因为代码腐朽，这个产品的服务质量非常低，在线上跑着跑着就会出现停止响应的情况，而且半夜经常性的报警。在一段头痛医头脚痛医脚的痛苦经历之后，我们决定停下来重写该项目。在春节前的两周内，我们重写了最核心的几个页面，然后通过Nginx分发来实现新旧代码的切换。做完这件事情之后，服务器报警和间歇性抽风总算消停了，产品所耗费的服务器数量也少了一些。但整个过程很不舒服，大家压力都很大（临近春节，希望做完了回家过节），而且之后剩余功能的重写以及bug的修复也耗费了大量时间。

整体上我是反对停车换轮子的做法的。

1. 一方面并不是每个项目都能付出这样的时间成本。例如早期米聊与微信竞争的过程中，有段时间频繁出现服务器连接不上、消息发送不出去的现象，这时的米聊不可能停下来不做功能升级只做代码重构性能优化，市场不允许。除了开发需要时间外，测试也需要大量时间。因为一般的用户产品并不能很好的靠自动化测试来保证质量，而是依赖测试人员，代码大面积重构之后，这些功能得全部重新测试。
1. 另外一方面，停下来重构，所实现的功能都是**过去的功能**，而不是**未来的功能**。对于已实现功能的再次开发对开发者往往没有特别强的吸引力，而且重构后的代码也很难说就一定能支持后续产品功能的升级。

## 开着车换轮子

比较好的做法开着车换轮子，哪怕是车子会跑的慢一点。也就是说，我们会在鼓励持续的开发和重构。直观上重构会降低开发速度，但从我们的实践看，持续的重构保证了代码的质量和可维护性，使得bug的定位和修正更容易，往往会带来更高的效率。在实践中，我们发现一些简单的原则坚持下来即可取得良好的效果：

1. Don't Repeat Yourself。不拷贝代码。这一点和《重构》里面的观点并不一致，《重构》认为当代码被第二次而不是第一次拷贝的时候应该重构例如抽取成公共模块，这个观点相当的practical。但事实上我认为并不合理。这个观点成立的前提是**copy-paste-modify**大法比重构来得更快速。但现在的IDE对重构的支持相当完善，几个快捷键即可将公共代码抽取成独立方法或模块。而即使缺乏好的IDE支持，这个工作也并不费时。
1. 保持方法的小巧。一个大的方法往往是坏的开始。这个观点很多书中都讲到了，一般情况下稍微有经验的人也都知道并遵守这个约定。我们的实践中遇到的一个实际困难是客户端界面相关代码在构建时，流程性的代码本身就很长了，如果抽取成公共方法，要么需要传递特别多参数（控件），要么就是特别多私有成员变量。这个问题我们客户端工程师在考虑如何处理。
1. 借助工具。Java系Eclipse对重构的支持就很好，iOS的话，AppCode对重构支持也不错，xCode我不太确定。Javascript比较难弄，但Vim用熟悉之后也能比较快速的处理。
1. 共识胜于规范。主要原因在于软件开发过程中有些规范的界定是不太明确的，例如所谓面向对象的SRP，什么才算是单一职责？再比如高内聚低耦合，不同的人判断标准可能也不一样。这种情况下，团队已有的做法如果有其合理性，那么就按照这个做法做下去即可。当然，我们也需要避免出现**愤怒的猴子**所描述的现象，例如我听过一个搞笑的故事是一个开发经理让所有的开发者都是用HTTP/GET方法，而不用POST，原因是“POST方法会发两次请求”。

另外，推荐两本书，《重构》和《代码大全》。