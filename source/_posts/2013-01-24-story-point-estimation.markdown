---
layout: post
title: "如何预估工作量"
date: 2013-01-24 20:15
comments: true
categories: Scrum
---
我们的开发节奏是每周发布一个版本。这个版本应该包含尽可能多的新的功能，但不能超出团队的能力。这需要比较强的工作量预估的能力。我们采用story point来预估工作量。

## story point方式预估工作量
这个方法很简单，每一件要做的事情是一个story，为每一个story赋予一个point来表示该story需要的工作量，将全部story point加起来就得到了全部的工作量。确定point的过程，我们称为出分/估分。

我们在每周的计划会议上估分。计划会议之前，项目经理会整理一个story list。整理这个story list时，项目经理会综合考虑团队的战斗力以及公司对于项目时间的要求。计划会议中，开发团队首先会从list中挑选出***最小的***story，并为该story出分2（即point定为2）。该story即做为本周的基准story，其他story在出分时，都会与该story做比较。依次讨论list中的其他story并出分。全部story出分完毕之后得到整个list的point值，通过这个值就能判断出本周的工作是过饱和还是欠饱和并做相应处理。

一个常见的现象是将point直接等价于工作时间，这是错误的。每个人的能力都不一样，完成同一个story所需要的绝对时间也是不一样的，因此估计工作时间是很难达成一致的。而基准story则是消除这种现象的办法。假设A的效率是B的两倍、A只需要半天就能完成基准story，则B需要1天。对于另外一个story，假设A需要2天，那么B需要4天。在估计这个story时，A和B都会给出8这个值。

每周结束时我们会review整个list，看哪些story是全部完成的，并记录完成的story point，同时计算日人均story point。一段时间后，我们就能有一个每周日人均的折线图了。这个折线图也能帮我们估计下周能做多少事情。

## 一些实践
1. **每周的基准story都不一样，那上一周所完成的point值如何能作为本周的参考？**

    每次确定好本周的基准story之后，都将其与上一周的基准story做比较，算出一个比例。通过这个比例将上周完成的point换算过来即可。事实上我们不仅会记录与上一周的比例，同时还会依据历史比例计算本周与有史以来第一周的基准story的比值。直观看来，这样会有误差，而且随着时间的增加，误差会越来越大。但在实践过程中我们认为这个误差并不大，在接受范围内。

1. **基准story一定是*最小的*story吗？**

    其实不是的。我们会挑选一个比较小但是又的确有一定工作量的story。假设挑选了一个特别小的story，那么其他story的point都会巨大，误差也会巨大，就没有意义了。

1. **每个人都参与每一个story的估计吗？**

    是的。每一个story都要求开发团队的每一个成员独立估计，即使不参与这个story开发的人，也得参与出分。例如iOS开发者必须为Web开发的story估分，反之亦然。

    这样做一个显而易见的问题是，iOS开发者对于Web开发不了解，估分也只能是盲估，这就带来了比较大的不确定性。但我们认为，一个优秀的开发者，通过同事对工作的描述，是能相对准确的估计工作量的。另外，我们团队大多数开发者都具备多种开发技能。

    每一个story都需要全体开发者出分所带来的另一个问题是会议时间比较长，后来我们改进了一下，对于任意story，如果负责开发的人直接给出0、1、2的point，那就不需要讨论了。

1. **大家对同一story出分不一样怎么办？**

    我们规定point值只能从0、1、2、3、5、8、13、21、34、89中挑选（公司帮我们制作了出分专门用的纸牌，所以出分的过程被我们叫做打牌）。这样虽然大家出分会有一定差别，但大多数时候都会集中在相邻的三个数字上。这时出分最大的和出分最小的会分别说自己的观点，然后每个人再次出分。几次讨论之后出分就统一了。

    出分越大误差就越大，所以我们会尽可能避免出大分的现象。如果一个story太大，就将其拆开为多个story。我们出过最大的分值是21。

1. **一周结束时，如果有story没能完全完成，那么如何计算本周完成的point？**
  
    没有完成的story，无论是没开始做，还是差一点点就完成了，我们都不将其point计入本周完成的point。有一次我们一个13的story差一点就完成了，那周我们完成的point就显得很少。

