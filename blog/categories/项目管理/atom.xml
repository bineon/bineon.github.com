<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 项目管理 | 郭常圳]]></title>
  <link href="http://bineon.github.com/blog/categories/项目管理/atom.xml" rel="self"/>
  <link href="http://bineon.github.com/"/>
  <updated>2013-04-23T18:40:21+08:00</updated>
  <id>http://bineon.github.com/</id>
  <author>
    <name><![CDATA[Changzhen Guo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[开着车换轮子]]></title>
    <link href="http://bineon.github.com/blog/2013/04/22/keep-refacting/"/>
    <updated>2013-04-22T20:54:00+08:00</updated>
    <id>http://bineon.github.com/blog/2013/04/22/keep-refacting</id>
    <content type="html"><![CDATA[<p>跟汽车开久了轮子会老化一样，软件在持续开发的过程中，代码会逐渐腐朽。需求的变化、迫于工期而编写的代码、甚至代码重构本身都不可避免的导致代码腐朽。</p>

<p>例如在猿题库行测的开发过程中，手机客户端上做题界面中的工具条，我们调整过多个方案，每次方案调整都有一定的理由，但每次调整都不尽人意。客户端开发工程师很无语，代码改来改去，而且原有的代码不能删除，因为不能预知短期内代码会不会改回去（原有代码也可以删除，需要的话再从git仓库中找回即可）。这是非典型的因为需求变化而导致代码腐朽的问题（非典型是因为正常情况下，交互方案会由产品经理确定好，而这个例子中产品经理拿不定主意）。其他典型的需求变化则包括新功能的增加、原有功能的升级。</p>

<p>而迫于工期编写代码最容易出现<strong>copy-paste-modify</strong>现象。这种现象在页面相关的逻辑里面比较容易出现（例如iOS中的ViewController或者Java中Controller/Servlet）。例如2010年我刚接手某产品时，不少Controller里面的代码重复率高达80%，当时一个新来的员工抱怨说自己只能被迫着按照这种方式做，因为根本没办法对原有代码进行重构（如果重构，改动面积太大）。</p>

<h2>停车、换轮子</h2>

<p>解决这类问题，一种做法是停下来换轮子。大家在项目告一段落，例如一个大的版本发布之后，停下来不再开发新功能，而是重构原有的代码。直到代码重构到比较理想的状态之后再继续下一个版本的开发。</p>

<p>我们有这么干过。2010年我接手的那个产品，不仅仅有代码重复的问题，结构也非常不好，例如同样的逻辑分散在Apache配置、Spring配置以及Java代码中。因为代码腐朽，这个产品的服务质量非常低，在线上跑着跑着就会出现停止响应的情况，而且半夜经常性的报警。在一段头痛医头脚痛医脚的痛苦经历之后，我们决定停下来重写该项目。在春节前的两周内，我们重写了最核心的几个页面，然后通过Nginx分发来实现新旧代码的切换。做完这件事情之后，服务器报警和间歇性抽风总算消停了，产品所耗费的服务器数量也少了一些。但整个过程很不舒服，大家压力都很大（临近春节，希望做完了回家过节），而且之后剩余功能的重写以及bug的修复也耗费了大量时间。</p>

<p>整体上我是反对停车换轮子的做法的。</p>

<ol>
<li>一方面并不是每个项目都能付出这样的时间成本。例如早期米聊与微信竞争的过程中，有段时间频繁出现服务器连接不上、消息发送不出去的现象，这时的米聊不可能停下来不做功能升级只做代码重构性能优化，市场不允许。除了开发需要时间外，测试也需要大量时间。因为一般的用户产品并不能很好的靠自动化测试来保证质量，而是依赖测试人员，代码大面积重构之后，这些功能得全部重新测试。</li>
<li>另外一方面，停下来重构，所实现的功能都是<strong>过去的功能</strong>，而不是<strong>未来的功能</strong>。对于已实现功能的再次开发对开发者往往没有特别强的吸引力，而且重构后的代码也很难说就一定能支持后续产品功能的升级。</li>
</ol>


<h2>开着车换轮子</h2>

<p>比较好的做法开着车换轮子，哪怕是车子会跑的慢一点。也就是说，我们会在鼓励持续的开发和重构。直观上重构会降低开发速度，但从我们的实践看，持续的重构保证了代码的质量和可维护性，使得bug的定位和修正更容易，往往会带来更高的效率。在实践中，我们发现一些简单的原则坚持下来即可取得良好的效果：</p>

<ol>
<li>Don't Repeat Yourself。不拷贝代码。这一点和《重构》里面的观点并不一致，《重构》认为当代码被第二次而不是第一次拷贝的时候应该重构例如抽取成公共模块，这个观点相当的practical。但事实上我认为并不合理。这个观点成立的前提是<strong>copy-paste-modify</strong>大法比重构来得更快速。但现在的IDE对重构的支持相当完善，几个快捷键即可将公共代码抽取成独立方法或模块。而即使缺乏好的IDE支持，这个工作也并不费时。</li>
<li>保持方法的小巧。一个大的方法往往是坏的开始。这个观点很多书中都讲到了，一般情况下稍微有经验的人也都知道并遵守这个约定。我们的实践中遇到的一个实际困难是客户端界面相关代码在构建时，流程性的代码本身就很长了，如果抽取成公共方法，要么需要传递特别多参数（控件），要么就是特别多私有成员变量。这个问题我们客户端工程师在考虑如何处理。</li>
<li>借助工具。Java系Eclipse对重构的支持就很好，iOS的话，AppCode对重构支持也不错，xCode我不太确定。Javascript比较难弄，但Vim用熟悉之后也能比较快速的处理。</li>
<li>共识胜于规范。主要原因在于软件开发过程中有些规范的界定是不太明确的，例如所谓面向对象的SRP，什么才算是单一职责？再比如高内聚低耦合，不同的人判断标准可能也不一样。这种情况下，团队已有的做法如果有其合理性，那么就按照这个做法做下去即可。当然，我们也需要避免出现<strong>愤怒的猴子</strong>所描述的现象，例如我听过一个搞笑的故事是一个开发经理让所有的开发者都是用HTTP/GET方法，而不用POST，原因是“POST方法会发两次请求”。</li>
</ol>


<p>最后，推荐两本书，《重构》和《代码大全》。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让工程师远离会议]]></title>
    <link href="http://bineon.github.com/blog/2013/01/21/keep-meeting-away/"/>
    <updated>2013-01-21T20:19:00+08:00</updated>
    <id>http://bineon.github.com/blog/2013/01/21/keep-meeting-away</id>
    <content type="html"><![CDATA[<p>产品开发过程中的会议格外多，例如立项会议、需求评审会议、交互评审会议、视觉评审会议。除开这些常规的会议，还有每周例会、项目进度检查会等等。这些会议，有的是一次就能结束的，例如每周例会，更多的则是需要多次进行的，例如各种评审会议往往要持续2到3次。会议的本意是好的，希望与会者能够达成一致并顺利进行下一步的工作。但由于各种原因，鲜有会议得到有效的组织并高效进行的，大部分时间都被浪费掉了。基于此，我们严格限制团队的会议。目前的我们的工程师团队，只有2种会议：计划会议和每日站会。</p>

<h2>计划会议</h2>

<p>计划会议包括三个议题：</p>

<ol>
<li><strong>评审会议：</strong>上一周我们完成了哪些事情。所谓完成，大部分时候我们指可以交付上线（因此是包含测试以及修Bug的）。这些完成的事情，我们会依次演示给整个团队看。</li>
<li><strong>回顾会议：</strong>上一周我们做的怎么样。这个议题不会讨论与产品相关的任何具体功能，而是整个团队来回顾开发流程中做的好的地方以及待改善的地方。</li>
<li><strong>计划会议：</strong>接下来一周，我们做哪些事情。这个议题开始讨论之前，项目经理会准备好好一个供讨论的列表。讨论时，产品经理会依次介绍列表上的事情，之后工程师会轮流估算每个事情所花费的时间。时间估计完毕之后，项目经理会对这个列表做一些调整，可能是增加一些条目，也可能是移除一些条目。</li>
</ol>


<p>计划会议每周一次，每次3小时，前两个议题共1个小时，第三个议题2个小时。工程师、项目经理、产品经理都需要参与这个会议。产品经理在介绍完下周要做的事情的具体内容之后，整个会议会茶歇10分钟。茶歇之后的工作量估算，产品经理无需参与。</p>

<p>计划会议偶尔会延时。我们是10点10分开始计划会议，最长的一次会议持续到了下午3点。整个团队都觉得这很糟糕，在下一次的回顾会议中，大家都指出了这一点并强调应该加以改进。目前我们基本上能保证13点半之前完成整个计划会议。</p>

<h2>每日站会</h2>

<p>计划会议确定每周的工作，而每日站会则确定每天的工作。每次站会不超过十分钟，每个工程师依次说自己昨天做了哪些事情、今天打算做哪些事情、自己遇到了什么困难。站会上不允许对遇到的困难进行讨论，因为并不是每个人都关心这个困难并能提供帮助，而且解决方案的讨论往往会很耗时。</p>

<p>我们每天上午10点10分开站会。全部工程师会<strong>站在</strong>同一台电脑前对着我们的Redmine系统来回答那三个问题。公司为每个工程师统一配备27寸的iMac，所以任何一个工程师的电脑都足够开一个站会。</p>

<h2>一些实践</h2>

<p>基于效率的考虑，我们有一些会议行为的限制。包括：</p>

<ol>
<li>不允许迟到。如果有人迟到，我们会等着。这样的好处是每个人都能完全了解会议的内容，避免靠人来转述会议内容。</li>
<li>会议过程中不能吃东西</li>
<li>会议过程中不能用手机，包括接电话、打电话、看短信刷微博等等</li>
<li>会议过程中不能随意离开，包括收快递</li>
</ol>


<p>如果违反了规则，有两种惩罚措施，二选一：</p>

<ol>
<li>请整个团队TB</li>
<li>戴一天的小丑帽，中途不能取下来，中午吃饭也不能取下来，而且吃饭的地方可以由任意工程师提议。</li>
</ol>

]]></content>
  </entry>
  
</feed>
